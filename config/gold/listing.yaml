enable: True
name : listing
order: 1
inputs:
- name: listing
  uri: ${silver}/listing/eventdate=2025-08-26
  parameters:
    format: parquet

quality_gate:
- name: check_null_values
  validator: CoreValidator
  input: listing
  parameters:
    columns:
      ["listing_id" ,
      "listing_tech_id" ,
              "transaction_type" ,
              "item_type" ,
              "start_date" ,
              "change_date" ,
              "price" ,
              "area" ,
              "site_area" ,
              "floor" ,
              "room_count" ,
              "balcony_count" ,
              "terrace_count" ,
              "has_garden" ,
              "city" ,
              "zipcode" ,
              "has_passenger_lift" ,
              "is_new_construction" ,
              "build_year" ,
              "terrace_area" ,
              "has_cellar" ,
              "is_furnished"  ]
    rule: expect_column_values_to_not_be_null
    rule_kwargs: ""
    dataset_name: "listing_silver"
    output_table_name: "check_null_values_listing_silver"

- name: check_duplicate_values
  validator: CoreValidator
  input: listing
  parameters:
    columns: [listing_id,listing_tech_id]
    rule: expect_column_values_to_be_unique
    dataset_name: "listing_silver"
    output_table_name: "check_duplicate_values_listing"



transforms:
- name: generate_transaction_type_table
  transformer: src.transform.SqlTransformer
  inputs:
    listing: listing
  parameters:
    sql: " 
        SELECT 
        ROW_NUMBER() OVER (ORDER BY transaction_type) AS id_transaction_type,
        transaction_type AS libelle_transaction_type
    FROM listing
    GROUP BY transaction_type
    
    "


- name: generate_item_type_table
  transformer: src.transform.SqlTransformer
  inputs:
    listing: listing
  parameters:
    sql: " 
        SELECT 
        ROW_NUMBER() OVER (ORDER BY item_type) AS id_item_type,
        item_type AS libelle_item_ty
    FROM listing
    GROUP BY item_type
    "
- name: generate_item_subtype_table
  transformer: src.transform.SqlTransformer
  inputs:
    listing: listing
  parameters:
    sql: " 
         SELECT 
        ROW_NUMBER() OVER (ORDER BY item_subtype) AS item_subtype,
        l.item_subtype AS libelle_item_sub_type,
        it.id_item_type
    FROM listing l
    JOIN (
        SELECT DISTINCT item_type,
               ROW_NUMBER() OVER (ORDER BY item_type) AS id_item_type
        FROM listing
    ) it ON l.item_type = it.item_type
    GROUP BY l.item_subtype, it.id_item_type
    "

- name: generate_property_table
  transformer: src.transform.SqlTransformer
  inputs:
    listing: listing
  parameters:
    sql: " 
        SELECT 
        monotonically_increasing_id() AS id_property,
        CAST(r.start_date AS STRING) AS start_date,
        CAST(r.price AS DECIMAL(14,2)) AS price,
        CAST(r.area AS DECIMAL(10,2)) AS area,
        CAST(r.site_area AS DECIMAL(12,2)) AS site_area,
        CAST(r.floor AS INT) AS floor,
        CAST(r.room_count AS INT) AS room_count,
        CAST(r.balcony_count AS INT) AS balcony_count,
        CAST(r.terrace_count AS INT) AS terrace_count,
        CAST(r.has_garden AS STRING) AS has_garden,
        r.city,
        r.zipcode,
        CAST(r.has_passenger_lift AS STRING) AS has_passenger_lift,
        CAST(r.is_new_construction AS STRING) AS is_new_construction,
        CAST(r.build_year AS INT) AS build_year,
        CAST(r.terrace_area AS DECIMAL(10,2)) AS terrace_area,
        CAST(r.has_cellar AS STRING) AS has_cellar,
        tt.id_transaction_type,
        it.id_item_type,
        ist.id_item_sub_type
    FROM listing r
    JOIN (
        SELECT transaction_type, ROW_NUMBER() OVER (ORDER BY transaction_type) AS id_transaction_type
        FROM listing GROUP BY transaction_type
    ) tt ON r.transaction_type = tt.transaction_type
    JOIN (
        SELECT item_type, ROW_NUMBER() OVER (ORDER BY item_type) AS id_item_type
        FROM listing GROUP BY item_type
    ) it ON r.item_type = it.item_type
    JOIN (
        SELECT item_subtype, item_type, ROW_NUMBER() OVER (ORDER BY item_subtype) AS id_item_sub_type
        FROM listing GROUP BY item_type, item_subtype
    ) ist ON r.item_subtype = ist.item_subtype AND r.item_type = ist.item_type
"

- name: generate_historique_price_table
  transformer: src.transform.SqlTransformer
  inputs:
    listing: listing
  parameters:
    sql: "
     SELECT 
        monotonically_increasing_id() AS id_historique_price,
        p.id_property,
        CAST(r.change_date AS STRING) AS change_date,
        CAST(r.price AS DECIMAL(14,2)) AS change_price
    FROM listing r
    JOIN (
        SELECT monotonically_increasing_id() AS id_property, *
        FROM listing
    ) p ON r.start_date = p.start_date AND r.city = p.city
     "


outputs:
- name: generate_transaction_type_table
  loader: src.load.PostgresLoader
  input: generate_transaction_type_table
  uri: ${gold}/listing
  parameters:
    table_name: transaction_type

- name: generate_item_type_table
  loader: src.load.PostgresLoader
  input: generate_item_type_table
  uri: ${gold}/listing
  parameters:
    table_name: item_type

- name: generate_item_subtype_table
  loader: src.load.PostgresLoader
  input: generate_item_subtype_table
  uri: ${gold}/listing
  parameters:
    table_name: item_sub_type

- name: generate_property_table
  loader: src.load.PostgresLoader
  input: generate_property_table
  uri: ${gold}/listing
  parameters:
    table_name: property

- name: generate_historique_price_table
  loader: src.load.PostgresLoader
  input: generate_historique_price_table
  uri: ${gold}/listing
  parameters:
    table_name: historique_price
